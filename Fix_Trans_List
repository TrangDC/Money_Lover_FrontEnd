//Lấy danh sách giao dịch income theo tháng năm hiện tại và ví
    @GetMapping("/user/{user_id}/income_transaction/{wallet_id}/date/{year}/{monthIndex}")
    public ResponseEntity<?> findIncomeTransactionsByWalletAndDate(@PathVariable String user_id,
                                                                   @PathVariable String wallet_id,
                                                                   @PathVariable String year,
                                                                   @PathVariable String monthIndex){
        Optional<User> userOptional = userService.findById(Long.valueOf(user_id));
        if (userOptional.isEmpty()) {
            return new ResponseEntity<>("User not found", HttpStatus.NOT_FOUND);
        }
        // nếu wallet_id là all thì lấy tất cả giao dich
        if (wallet_id.equals("all")) {
            List<Transaction> userTransaction = userOptional.get().getTransactions();
            List<Transaction> incomeTransactions = new ArrayList<>();
            for (Transaction transaction: userTransaction) {
                String type = String.valueOf(transaction.getCategory().getType());
                if (type.equals("INCOME")) {
                    incomeTransactions.add(transaction);
                }
            }
            int month = Integer.parseInt(monthIndex) + 1;
            LocalDate startDate = LocalDate.of(Integer.parseInt(year), month, 1);
            LocalDate endDate = startDate.plusMonths(1).minusDays(1);

            List<Transaction> transactions = transactionRepository.findAllByTransactionDateBetween(startDate, endDate);
            List<Transaction> result = new ArrayList<>();

            for (Transaction transaction : transactions) {
                if (userTransaction.contains(transaction) && incomeTransactions.contains(transaction)) {
                    result.add(transaction);
                }
            }
            if (result.isEmpty()) {
                return new ResponseEntity<>(new ArrayList<>(), HttpStatus.OK);
            }
            return new ResponseEntity<>(result, HttpStatus.OK);
        }
        //tìm ví theo id
        Optional<Wallet> walletOptional = walletRepository.findById(Long.valueOf(wallet_id));
        if (walletOptional.isEmpty()) {
            return new ResponseEntity<>("Wallet not found", HttpStatus.NOT_FOUND);
        }
        //tìm danh sach giao dịch theo ví
        List<Transaction> transactionList = transactionRepository.findByWallet(walletOptional.get());
        List<Transaction> incomeTransactionList = new ArrayList<>();
        for (Transaction transaction:transactionList) {
            String type = String.valueOf(transaction.getCategory().getType());
            if (type.equals("INCOME")) {
                incomeTransactionList.add(transaction);
            }
        }
        int month = Integer.parseInt(monthIndex) + 1;
        LocalDate startDate = LocalDate.of(Integer.parseInt(year), month, 1);
        LocalDate endDate = startDate.plusMonths(1).minusDays(1);

        List<Transaction> transactions = transactionRepository.findAllByTransactionDateBetween(startDate, endDate);
        List<Transaction> userTransactions = userOptional.get().getTransactions();
        List<Transaction> result = new ArrayList<>();

        for (Transaction transaction : transactions) {
            if (userTransactions.contains(transaction) && incomeTransactionList.contains(transaction)) {
                result.add(transaction);
            }
        }
        if (result.isEmpty()) {
            return new ResponseEntity<>(new ArrayList<>(), HttpStatus.OK);
        }
        return new ResponseEntity<>(result, HttpStatus.OK);
    }
